parameters:
- name: dependsOn
  type: object
  default: []
- name: azureSubscription
  type: string
- name: environment
  type: string
- name: environmentName
  type: string

jobs:
- deployment: validate_bicep_against_${{ parameters.environmentName }}_environment
  dependsOn: ${{ parameters.dependsOn }}
  environment: ${{ parameters.environment }}

  workspace:
    clean: all

  strategy:
    runOnce:
      deploy:
        steps:
          - checkout: self

          - task: AzureCLI@2
            name: RunPreflightValidation
            inputs:
              azureSubscription: ${{ parameters.azureSubscription }}
              scriptType: 'pscore'
              scriptLocation: 'inlineScript'
              addSpnToEnvironment: true
              inlineScript: |
                $config = (Get-Content ./params/platform.${{ parameters.environmentName }}.json | ConvertFrom-Json)

                $deployPrincipalId = (az ad sp show --id $env:servicePrincipalId | ConvertFrom-Json).id

                $deletedKeyVaults = az keyvault list-deleted --query '[].properties.vaultId' | ConvertFrom-Json
                $isDeleted = $deletedKeyVaults | where {$_ -match "rg-platform-monitoring-${{ parameters.environmentName }}-$($config.parameters.location.value)-$($config.parameters.instance.value)"}

                $keyVaultCreateMode = "default"
                if ($isDeleted -ne $null) {
                  # To allow the environments to be torn-down and re-created, the Key Vault Create Mode must be set to 'recover'.
                  $keyVaultCreateMode = "recover"
                }

                az deployment sub validate `
                  --name 'platformMonitoring${{ parameters.environmentName }}' `
                  --template-file bicep/platform.bicep `
                  --location $config.parameters.location.value `
                  --parameters @params/platform.${{ parameters.environmentName }}.json `
                      keyVaultCreateMode=$keyVaultCreateMode `
                      deployPrincipalId=$deployPrincipalId

                if ((az group exists --name "rg-platform-monitoring-${{ parameters.environmentName }}-$($config.parameters.location.value)-$($config.parameters.instance.value)") -eq $true) {
                  az deployment group validate `
                    --name 'servicesMonitoring${{ parameters.environmentName }}' `
                    --resource-group "rg-platform-monitoring-${{ parameters.environmentName }}-$($config.parameters.location.value)-$($config.parameters.instance.value)" `
                    --template-file ./bicep/services.bicep `
                    --parameters @params/services.${{ parameters.environmentName }}.json
                }

          - task: AzureCLI@2
            name: RunWhatIfDeploy
            inputs:
              azureSubscription: ${{ parameters.azureSubscription }}
              scriptType: 'pscore'
              scriptLocation: 'inlineScript'
              addSpnToEnvironment: true
              inlineScript: |
                $config = (Get-Content ./params/platform.${{ parameters.environmentName }}.json | ConvertFrom-Json)

                $deployPrincipalId = (az ad sp show --id $env:servicePrincipalId | ConvertFrom-Json).id

                $deletedKeyVaults = az keyvault list-deleted --query '[].properties.vaultId' | ConvertFrom-Json
                $isDeleted = $deletedKeyVaults | where {$_ -match "rg-platform-monitoring-${{ parameters.environmentName }}-$($config.parameters.location.value)-$($config.parameters.instance.value)"}

                $keyVaultCreateMode = "default"
                if ($isDeleted -ne $null) {
                  # To allow the environments to be torn-down and re-created, the Key Vault Create Mode must be set to 'recover'.
                  $keyVaultCreateMode = "recover"
                }

                az deployment sub what-if `
                  --name 'platformMonitoring${{ parameters.environmentName }}' `
                  --template-file bicep/platform.bicep `
                  --location $config.parameters.location.value `
                  --parameters @params/platform.${{ parameters.environmentName }}.json `
                      keyVaultCreateMode=$keyVaultCreateMode `
                      deployPrincipalId=$deployPrincipalId

                if ((az group exists --name "rg-platform-monitoring-${{ parameters.environmentName }}-$($config.parameters.location.value)-$($config.parameters.instance.value)") -eq $true) {
                  az deployment group what-if `
                    --name 'servicesMonitoring${{ parameters.environmentName }}' `
                    --resource-group "rg-platform-monitoring-${{ parameters.environmentName }}-$($config.parameters.location.value)-$($config.parameters.instance.value)" `
                    --template-file ./bicep/services.bicep `
                    --parameters @params/services.${{ parameters.environmentName }}.json
                }
