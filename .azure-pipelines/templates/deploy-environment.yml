parameters:
- name: azureSubscription
  type: string
- name: environment
  type: string
- name: environmentName
  type: string
- name: environmentTag
  type: string

stages:
- stage: Deploy${{ parameters.environmentName }}
  jobs:
  - deployment: Deploy${{ parameters.environmentName }}PlatformBicep
    environment: ${{ parameters.environment }}

    workspace:
      clean: all

    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self

            - task: AzureCLI@2
              displayName: Deploy${{ parameters.environmentName }}PlatformBicep
              inputs:
                azureSubscription: ${{ parameters.azureSubscription }}
                scriptType: 'pscore'
                scriptLocation: 'inlineScript'
                addSpnToEnvironment: true
                inlineScript: |
                  $deletedKeyVaults = az keyvault list-deleted --query '[].properties.vaultId' | ConvertFrom-Json
                  $isDeleted = $deletedKeyVaults | where {$_ -match 'rg-platform-monitoring-*.*-${{ parameters.environmentTag }}-uksouth'}

                  $keyVaultCreateMode = "default"
                  if ($isDeleted -ne $null) {
                    # To allow the environments to be torn-down and re-created, the Key Vault Create Mode must be set to 'recover'.
                    $keyVaultCreateMode = "recover"
                  }

                  $deployPrincipalId = (az ad sp show --id $env:servicePrincipalId | ConvertFrom-Json).id

                  az deployment sub create `
                    --name 'platformMonitoring${{ parameters.environmentName }}' `
                    --template-file bicep/platform.bicep `
                    --location 'uksouth' `
                    --parameters @params/platform.${{ parameters.environmentTag }}.json `
                      parPlatformKeyVaultCreateMode=$keyVaultCreateMode `
                      parDeployPrincipalId=$deployPrincipalId

  - deployment: Deploy${{ parameters.environmentName }}ServicesBicep
    dependsOn: ['Deploy${{ parameters.environmentName }}PlatformBicep']
    environment: ${{ parameters.environment }}

    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            
            - task: AzureCLI@2
              displayName: Deploy${{ parameters.environmentName }}ServicesBicep
              inputs:
                azureSubscription: ${{ parameters.azureSubscription }}
                scriptType: 'pscore'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  $resourceGroupName = az deployment sub show --name platformMonitoring${{ parameters.environmentName }} --output tsv --query properties.outputs.resourceGroupName

                  az deployment group create `
                    --name 'servicesMonitoring${{ parameters.environmentName }}' `
                    --resource-group $resourceGroupName `
                    --template-file bicep/services.bicep `
                    --parameters @params/services.${{ parameters.environmentTag }}.json